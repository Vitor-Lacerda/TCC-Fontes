function [Y,Xf,Af] = RedeSecoes(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 14-Jul-2016 16:08:23.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [15;64;1.65950800468567;29;94.2205882352941;49;55.9159965824702;1.15470053837912];
  x1_step1_gain = [0.0104712041884817;0.0104712041884817;0.0469248308460376;0.00888888888888889;0.488438334837145;0.00352733686067019;0.00349711782154249;0.0308337949828769];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [2.8835612930509478;-1.1724601661798837;-1.2881295618471031;-0.65735411644151709;0.065710199092610513;-0.63438404978230878;-1.8470812798830847;0.73786346953988657;-2.3294718727974475;1.1703582635379315];
  IW1_1 = [0.072258518199292326 0.064666642893882714 -0.74726346782801711 1.3255606467103955 -0.35484492371758192 -1.0910267975907746 -0.33621414240933001 -0.33007773130081319;2.2227160641659633 0.47412716889498946 1.6749139198930998 1.7828913680698937 0.28513189934595157 0.44951300434930441 -0.26905185627604478 -0.27287621219073549;1.1009846038662614 -0.77444150115609522 0.73716356671330285 -0.38735160342737646 0.20545153807858729 -0.17197888240154108 0.31145348443602194 1.4723978300447809;0.33209992317459941 -0.68622050325691464 -0.44925549896012479 -0.67681704179266289 0.67711181585018587 0.86671514593889565 0.86272229440901027 0.80905006613466668;0.5635437953068333 0.72361928709389722 -0.42648143935765642 0.08051867063756353 1.0844064816954151 -0.61545536909133769 -0.84512191789834468 -0.86305147462123499;0.73609355410280053 0.60546242510939452 -1.0985321060024344 1.7739697195136246 0.21640370249675553 -0.69482890948238019 0.93357802071437712 0.22432965673674768;-0.097988622669698017 -0.33512908203455066 -5.9378239144870957 2.4076062865481389 -3.6217251166410986 0.17231865703716864 1.7246423140116305 1.3933869566604373;0.44386517876073583 1.1176475711083595 0.78519285835687846 0.36402794958056123 -1.0675841705525186 0.67595200966530256 -0.064851263827742561 -0.1157984744543637;-2.5270570215404136 -2.8692216263703409 -2.6875180878679856 -0.53436475521568061 -0.85609303072221021 -0.020658347334517692 0.12219968122360951 0.24493493082237253;0.48197076840048364 -0.1668251848231361 -0.060036567100900155 0.74106261627136372 0.94936283207529604 -0.86783752671602055 -1.6363198773277432 -0.99116568366458957];
  
  % Layer 2
  b2 = [0.95053284123075632;-1.0174682312525134];
  LW2_1 = [-0.72139292832379898 0.25331163427973585 -0.075814432326066147 -0.32265437502417466 0.47695137405622862 1.2022345614186938 1.2717794811596319 -0.4893540593709878 1.7570680181907825 0.62477009484024137;0.93239209378122323 -0.86494790426774981 -0.19427911579037477 1.0092415782577546 -0.079564991403813998 -2.5766378679911903 -1.1403487202178479 1.2176728848701963 -1.608447527430644 -1.5261080149281809];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numer = exp(n);
  denom = sum(numer,1); 
  denom(denom == 0) = 1;
  a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
