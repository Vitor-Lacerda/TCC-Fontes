function [Y,Xf,Af] = RedeSecoes(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 25-Aug-2016 15:35:18.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [15;64;1.65950800468567;29;94.2205882352941;49;55.9159965824702;1.15470053837912];
  x1_step1_gain = [0.0104712041884817;0.0104712041884817;0.0469248308460376;0.00888888888888889;0.488438334837145;0.00352733686067019;0.00349711782154249;0.0308337949828769];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [2.2924594352714829;-1.5363450779092775;-1.6353580490843067;-0.66967482562643343;-0.51532510441194979;-2.2478464704355381;-1.2685774278707462;0.8987500538458032;-3.4043690988367525;1.1264012425327619];
  IW1_1 = [-0.45073126940402897 -0.45832314470943858 -0.44352039163546481 0.67246602623691121 -0.55634253056489713 -0.82625917904247947 0.28188519514110522 -1.149191408248837;2.8770087389735641 1.1284198437025901 0.75005939461388416 1.1057851967267776 0.43200390520166992 0.99542700107116833 0.28612945818224605 0.023106184713391192;1.0080387924362213 -0.86738731258613611 0.88572399613886132 -0.53556272582337194 0.09493569919830333 -0.13568201682176964 0.49514630822066774 1.0660207281027601;0.2788868092343984 -0.73943361719711564 -0.43504403500858962 -0.71331918882967627 0.65720285817330804 0.93682529883497834 0.9880175959751053 0.91472623182617974;0.03575757393990496 0.19583306572696862 -0.66082604266606537 0.15170293678311991 2.3375388269878417 -0.74669240565646056 -1.0299506967853531 -0.52192861588552786;0.61775056841210518 0.48711943941869951 -2.5238948692543719 4.8557248022340573 0.098115713290764586 -0.7459388119280802 0.4115334304846695 0.20293042545092391;-0.51944278022209356 -0.75658323958694607 -8.2240426258170771 1.4211184056658299 -0.65212061667029797 1.1267713099455958 2.563424456682021 1.8252609831339179;0.25386832063786141 0.92765071298548551 0.1652989663599238 0.43561448946714532 -1.2154698405313291 0.2777065829373907 -0.30187146389276698 -0.82854049052758472;-3.4249252733352442 -3.7670898781651716 -3.3899948815663921 1.0066636382279686 -1.2903508134938524 -0.082019868414095629 0.005806306409083084 0.23573434805539165;0.49976133392559768 -0.14903461929802184 -0.025513861916321996 0.73345318471122389 0.95210047813388521 -0.8164595562073218 -1.5529932874973791 -1.1054452544847784];
  
  % Layer 2
  b2 = [0.94092639686638579;-1.0078617868880881];
  LW2_1 = [0.35102170492797896 3.3329387999578786 -0.32996502999570854 -1.2130617471043679 2.4255483070948971 4.6835412219225638 5.9085108147158927 0.99277002173159501 5.112126106475201 0.95399685847690097;-0.14002253947050219 -3.944575069945929 0.059871481879215205 1.8996489503379017 -2.0281619244424296 -6.0579445284950895 -5.7770800537741582 -0.26445119623234192 -4.9635056157151114 -1.8553347785647925];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numer = exp(n);
  denom = sum(numer,1); 
  denom(denom == 0) = 1;
  a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
