function [Y,Xf,Af] = RedeVagas(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Sep-2016 16:23:30.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [0.0339351125065411;0.795509157710641;0.116745158764052;0.880737459819093;106.000322858373;125.5395691906];
  x1_step1_gain = [6.93795965475918;10.3981849134775;2.81298738420851;19.5513007892429;0.0691584779777693;0.0756841244625484];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [2.088806877332027;-1.5670133056797924;-0.5536057559003954;-0.60225114823948467;-0.40845667037576783;0.12063698048931618;-0.55850456566615225;1.267504496733334;-1.8458585491573396;2.0572307174879478];
  IW1_1 = [-1.2184702214977479 -1.2168725765551032 -0.34626545695081207 0.45969490345617253 -0.6397795707358831 -0.66408607511437778;1.1644887267904651 -0.77584545747336942 0.92398275658655293 0.54746484492189795 0.041378110466635053 1.0453953982815272;0.5705129528537316 -1.3854879041377399 0.9560350171202785 -0.40837460816992305 0.90100646366901005 -1.0301475304477263;0.55751518364763231 -0.34645458493745557 -1.1516064546900751 -1.0363900127009475 0.88193379724563148 1.0686206127816764;1.3421022802450526 2.1928599808538753 -1.1475469626435331 -0.51573732361920888 0.3182037666908577 -0.20966972949312251;0.59806690391221151 0.021211462553235638 0.34573461113443588 1.6783602990130528 0.41032475071798358 -1.0840194862708918;-0.56815932210047715 -0.85607057103163287 0.76945329667227136 -0.47468169112477043 -1.1049763943762561 -1.0444873081839121;0.25142380089075494 1.1262650411484296 1.0022486181808272 0.54404841525772807 -1.1000815080618693 0.29610505872959403;-0.79036678018154349 -1.169773393512026 0.61507908636012776 -0.89167800033783506 -0.85598387376255558 0.086803724099281956;0.77735745076436891 -0.22643187885701974 -0.84973178894442569 0.94506459317068059 1.2780118523860324 -0.56042810109714947];
  
  % Layer 2
  b2 = [0.40124465016349703;-0.19024548470607314];
  LW2_1 = [0.32871267369828222 0.25857050960827149 -0.74593570623356753 0.92385686360502639 1.3806831241665583 -1.1724628523398191 0.585961681356442 -0.27881074402363165 -0.028359830367442908 -0.52970236440937646;0.50347276439974809 0.6752640346336275 0.83201420209575727 -0.65550698109732242 -2.093331263589989 0.34195819569097868 0.84039414730594608 -0.32372951728452259 -1.0090547485136627 -0.47168773040637485];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numer = exp(n);
  denom = sum(numer,1); 
  denom(denom == 0) = 1;
  a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
