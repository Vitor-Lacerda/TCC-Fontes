function [Y,Xf,Af] = RedeVagas(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 12-Sep-2016 12:07:52.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [0.00181667516573177;0.729590254819995;0.116745158764052;0.826383712905452;106.000322858373;125.5395691906];
  x1_step1_gain = [2.3186744322415;7.74276865550986;2.28640034029812;11.5802428646443;0.0691584779777693;0.0756841244625484];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [2.0855088452676616;-1.5560185558131376;-0.28439587973770392;-1.1320362106575494;-1.5206316065495424;1.2492554461004648;-1.2563229195828747;1.5347599411708639;-1.8864708424183263;2.0860389105989343];
  IW1_1 = [-1.2300148388860714 -1.2190418581755158 -0.35532206909388775 0.46225567870980683 -0.64041230717867703 -0.65225527798860028;1.1457087751968444 -0.7781377545315793 0.93517538494686625 0.5656284475304838 0.04651969124422177 1.0368399664551191;0.16377130467677412 -1.0901043490090947 0.9983184767426091 -0.12139150929349821 0.99009359697685484 -1.2820000866855084;0.84446443389663695 2.963764379546292 -3.3501638701364329 -1.2760537099201883 1.105551773824377 2.2609902099796515;2.024904559958888 3.8024337304886395 -3.7064221722140878 -1.3398414220890895 1.0206324666213864 1.6070244577709125;-0.15679312563144659 -3.7006024289248463 3.6176252327964806 2.1690889304403109 -0.66735000421341084 -2.8309712152413367;-0.017679612105883688 -0.87433492330702345 0.49753940172257888 -0.80245027339132502 -1.8844375671575966 -0.50252437896887614;-0.26632819675963004 0.70580170339421211 1.8053606486717526 1.1694748420867074 -0.86925492475190569 0.07594716339115816;-0.64249659623554578 -1.1779475067672365 0.48894019580790377 -1.0495018657313555 -0.92562639048140638 0.12549190262999921;0.76257214598809397 -0.20168269621743895 -0.87587281855461074 0.94552528002035241 1.2546748266906507 -0.57840802575642114];
  
  % Layer 2
  b2 = [0.4194466002314855;-0.20844743477428085];
  LW2_1 = [0.34263001586168762 0.23233560007316162 -0.75901735231142686 3.6704285243348433 4.3211262281019058 -4.7020067129216612 0.97858467561224893 -0.28774126293744379 -0.12568882607628945 -0.57882795327510506;0.48955542223612913 0.70149894416897163 0.84509584817381145 -3.402078641827234 -5.0337743675254689 3.8715020562729419 0.4477711530503527 -0.3147989983711148 -0.9117257528045889 -0.42256214154085558];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numer = exp(n);
  denom = sum(numer,1); 
  denom(denom == 0) = 1;
  a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
