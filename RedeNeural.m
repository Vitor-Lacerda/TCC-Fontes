function [Y,Xf,Af] = RedeNeural(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 02-Sep-2016 15:11:22.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [0.000522565320665083;0.664734556012531;0.12023397521925;0.855765503875969;98.3453828458758;121.993481435127];
  x1_step1_gain = [5.53142535875738;6.00442236546221;2.27972802141641;13.8914729475305;0.0485253078086986;0.0409323280941659];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [2.2843550420796781;-1.5990777760911015;-1.9214853007014359;-1.4368916467198332;-0.94686594323734796;-0.33270306580681996;0.46104147683740504;-0.0026289365119991498;-0.84653098752795386;0.53423491796439648;-1.5807417365958722;-1.1251555725878328;-2.0683695781020375;-2.0504702275840625;3.0589707442671492];
  IW1_1 = [-1.5352286234200057 0.73242168406736152 0.54023265500723405 0.11487154159191418 1.1277044462542458 0.1836756925289352;1.8424002282396863 -0.34739621412725635 0.23012763805920994 -1.8223825344960478 0.39229318580393469 -0.35104135824530514;0.4328119714845699 1.1182322365977269 -0.5458889347607554 -0.0023563125325914008 0.013371044271405931 -0.91859655708627719;0.4644881282246241 -0.69919462902762286 -1.349444868656924 -0.31498718623934813 1.1003069877674141 -0.29372348138994664;0.98897451455798369 0.36709917281478521 -0.28684796951529995 1.5123918429761183 -0.62100244774872415 -1.7406646535756665;1.1412614282941653 -0.0091504927586630314 0.96742675674006862 -1.1218355563697338 1.0139602067647076 1.0974817716320724;-0.24472863474055567 1.1797518175120081 -0.80839010517060239 1.1259764008095101 0.94842111543912822 -0.8094089937680663;0.051946668688542252 2.7072203843573508 -0.28063161537771775 -0.46717887257795104 0.1559809893918051 0.43341831772680506;-1.0488681598830971 -1.0599366837290649 -0.58813706824912215 1.5578072664113727 -0.17771991690575539 -0.40727965440001285;1.2076322861255835 0.3612146443566181 0.6855652410172377 -0.84142787945875441 -2.0681009928458089 0.71763875013603606;-0.94056490021294548 0.67279478241845136 -1.5623378857231101 -0.32864077830481936 -1.4345330611856026 0.47407912963755316;-1.293442196468076 1.0587559504555668 -0.24470392792380646 -1.2233169229981624 0.29305766227645574 1.0072993368367393;-1.5030789293462745 0.093160701721213476 1.4752151079589593 0.45503669952650849 0.49575009009834642 0.2365955332852922;-1.0234151126679183 0.53481708313732979 1.2410386343871387 -0.15232041435906091 1.0435714611693678 0.62896891111394837;0.26842749350985878 -0.93851130625934709 2.2419679963532833 -0.58292623957364131 -1.3054583676102451 -0.722630490339357];
  
  % Layer 2
  b2 = [0.99951914292644128;-1.0535041181717666];
  LW2_1 = [-0.66539795653748091 0.81665384477384317 0.55294311559700204 0.19969507171719997 0.6011833581976378 0.35889854262770038 1.1245523172331162 1.7399663841868585 0.24090239939703262 1.2492372539688015 1.1507382771396171 -0.2732232242656058 -1.1887108789170391 -0.079063273628262251 -2.7439526900610165;-0.70900535003501619 -0.68522308383205921 0.17537570990220602 -0.051074580957062743 -1.5025212782855752 -0.42583393264945879 0.059875053496754815 -1.8337052824380187 -0.92159629549792899 -0.78627263859309837 -0.96574903167486581 -0.9080929819209822 1.1994324116145443 0.33819285203206467 2.7399245219522577];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numer = exp(n);
  denom = sum(numer,1); 
  denom(denom == 0) = 1;
  a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
