function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 08-Jul-2016 16:17:57.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [31;80;1.37877714064815;53;75.7004310344828;8;4.41403454455413;1.15470053837873];
  x1_step1_gain = [0.0114285714285714;0.0114285714285714;0.0498403505766701;0.00995024875621891;0.0880647215734833;0.00390625;0.0081754292407715;0.0240404546001398];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [1.8900473790905483;-1.4455053861624101;-1.579565609212719;-0.32808235591123797;-1.1692778035295539;0.021005431023787408;-2.2885907088726625;1.138015469151167;-2.058178088524989;1.7797451779265188];
  IW1_1 = [-0.84267442111850022 -0.85026629642390983 -0.28046479546761732 0.43223713402694347 -0.48333639329379757 -0.49519390839317129 0.6419186372107889 -0.86296171093413465;1.2541176581701281 -0.49447123710084651 0.72186945654953916 0.77397058838459909 0.0074069031392868193 0.86595460703407323 0.15005135350170387 0.14637777013319289;0.99659512625922642 -0.87883097876313021 0.51500238374272289 -0.42999931333393215 0.25719565513187226 -0.37404246790082596 0.070501113381525385 0.7893910426187789;0.45200404464850136 -0.56631638178301313 -0.041557636401704574 -0.81507237131913424 0.81543788882534474 1.056351337356743 1.178791009217999 0.72451640120225935;0.050639636049352323 0.21071512783641624 -1.1906687986822988 0.46375302476457159 1.2582570830116702 -0.58328987107732266 -1.6522745520905273 -0.15303994563071249;0.73752491092224515 0.60689378192883936 0.088417258418399966 1.1515925163651513 0.055997733548727273 -0.63901302608043331 0.81892444196387759 0.11248731704408318;-0.20114617475847946 -0.43828663412333213 -3.4197776713624006 1.9273747169069468 -0.50015008099775116 -0.62871126423880119 0.50789204448321923 0.41631272918096268;0.61812953423241324 1.2919119265800365 1.2223028167701502 0.41895328127058606 -0.75131040252041992 0.27275245114530422 -0.34059187944031649 -0.67045976100644489;-1.1284709981024421 -1.4706356029323697 -1.3506763504136752 -0.54916182008431913 -0.46560826064907085 0.02465528789675555 0.1835098549197165 -0.41053555603074537;0.50903682902639025 -0.13975912419722947 -0.51056931582890397 0.63733507192786187 0.82641042452763802 -0.35821264806520392 -1.0715297204475402 -0.82458895166761514];
  
  % Layer 2
  b2 = [0.4486422794556974;-0.51557766947745931];
  LW2_1 = [-0.0027695695419888092 0.51529435909126442 0.26178453855624167 -0.50457895317368651 1.8937927002610522 -0.63080339213442205 2.8564173994299709 -0.37660951964683853 1.7653562888833527 -0.38011687248049764;0.21376873499940857 -1.1269306290792731 -0.53187808667267567 1.1911661564072675 -1.4964063176086342 -0.74359991443807649 -2.7249866384881818 1.1049283451460443 -1.61673579812321 -0.52122104760744481];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numer = exp(n);
  denom = sum(numer,1); 
  denom(denom == 0) = 1;
  a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
